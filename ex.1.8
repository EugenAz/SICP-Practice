#lang racket

(define d 1e-15)

(define (cube-root-iter old_guess guess x)(
  if (good-enough? old_guess guess)
    guess
    (cube-root-iter guess (improve guess x) x)
))

(define (square x) (* x x))

(define (improve guess x) (
  / (+ (/ x (square guess)) (* 2 guess)) 3
))

(define (good-enough? old_guess guess)(
  < (abs (- guess old_guess)) (abs (* guess d))
))

(define (abs x) (if (> x 0) x (- 0 x)))

(define (cube-root x) (
  if (or (= x 0) (and (> x 0) (< x d)))
     0
     (cube-root-iter 0 1 x)
))
