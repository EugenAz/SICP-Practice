#lang racket

(define d 1e-15)

(define (sqrt-iter old_guess guess x)(
  if (good-enough? old_guess guess)
    guess
    (sqrt-iter guess (improve guess x) x)
))

(define (improve guess x) (
  average guess (/ x guess)
))

(define (good-enough? old_guess guess)(
  < (abs (- guess old_guess)) (* guess d)
))

(define (average x y) (/ (+ x y) 2))

(define (abs x) (if (> x 0) x (- 0 x)))

(define (sqrt x) (
  cond ((< x 0) #f)
       ((< x d) 0)
       (else (sqrt-iter 0 1 x))
))

(sqrt 0)

; На маленьких числах процедура с такой реализацией good-enough? работает лучше. На больших улучшения нет.
